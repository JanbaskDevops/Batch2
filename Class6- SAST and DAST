1) SAST[Static application security testing] Hands on
=====================================================

Vulnerability: A security-related issue which represents a backdoor for attackers.

[Source code] https://github.com/juice-shop/juice-shop
Step1: git clone https://github.com/juice-shop/juice-shop

[SAST tool link] https://github.com/ZupIT/horusec
Step2: apt-get update ; apt install jq

Step3: curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/master/deployments/scripts/install.sh | bash -s latest
       horusec version

Step4: horusec start -D -e="true" -p ./

Horusec is an open source framework that enhances the identification of vulnerabilities in your project with just one command.
https://horusec.io/site/

in this analysis, a total of 492 possible vulnerabilities were found and we classified them into:
Total of Vulnerability CRITICAL is: 382
Total of Vulnerability HIGH is: 102
Total of Vulnerability MEDIUM is: 5
Total of Vulnerability LOW is: 3

2) DAST[Dynamic application security testing] 
==========================
Run application as container
Step1: docker run --rm -idt -p 3000:3000 bkimminich/juice-shop 

docker run -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t <Application URL>
docker run -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://ip172-18-0-72-cq3ouei91nsg00damfh0-3000.direct.labs.play-with-docker.com

WARN-NEW: Dangerous JS Functions [10110] x 2 
        http://ip172-18-0-100-ckucfiufml8g009dm00g-3000.direct.labs.play-with-docker.com/main.js (200 OK)
        http://ip172-18-0-100-ckucfiufml8g009dm00g-3000.direct.labs.play-with-docker.com/vendor.js (200 OK)
FAIL-NEW: 0     FAIL-INPROG: 0  WARN-NEW: 9     WARN-INPROG: 0  INFO: 0 IGNORE: 0       PASS: 56

Application: collection of webpages. in DAST, it will navigate to each possible webpage and provide security analysis

The different types of tests 
________________________________________
1. Unit tests 
Unit tests are very low level and close to the source of an application. They consist in testing individual methods and functions of the classes, components, or modules used by your software. Unit tests are generally quite cheap to automate and can run very quickly by a continuous integration server.

2. Integration tests 
Integration tests verify that different modules or services used by your application work well together. For example, it can be testing the interaction with the database or making sure that microservices work together as expected. These types of tests are more expensive to run as they require multiple parts of the application to be up and running.

3. Functional tests 
Functional tests focus on the business requirements of an application. They only verify the output of an action and do not check the intermediate states of the system when performing that action.
There is sometimes a confusion between integration tests and functional tests as they both require multiple components to interact with each other. The difference is that an integration test may simply verify that you can query the database while a functional test would expect to get a specific value from the database as defined by the product requirements.

4. End-to-end tests 
End-to-end testing replicates a user behaviour with the software in a complete application environment. It verifies that various user flows work as expected and can be as simple as loading a web page or logging in or much more complex scenarios verifying email notifications, online payments, etc...
End-to-end tests are very useful, but they're expensive to perform and can be hard to maintain when they're automated. It is recommended to have a few key end-to-end tests and rely more on lower-level types of testing (unit and integration tests) to be able to quickly identify breaking changes.

5. Acceptance testing 
Acceptance tests are formal tests that verify if a system satisfies business requirements. They require the entire application to be running while testing and focus on replicating user behaviours. But they can also go further and measure the performance of the system and reject changes if certain goals are not met.

6. Performance testing 
Performance tests evaluate how a system performs under a particular workload. These tests help to measure the reliability, speed, scalability, and responsiveness of an application. For instance, a performance test can observe response times when executing a high number of requests, or determine how a system behaves with a significant amount of data. It can determine if an application meets performance requirements, locate bottlenecks, measure stability during peak traffic, and more. 

7. Smoke testing 
Smoke tests are basic tests that check the basic functionality of an application. They are meant to be quick to execute, and their goal is to give you the assurance that the major features of your system are working as expected.
Smoke tests can be useful right after a new build is made to decide whether or not you can run more expensive tests, or right after a deployment to make sure that they application is running properly in the newly deployed environment.

