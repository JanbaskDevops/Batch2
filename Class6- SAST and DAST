1) SAST[Static application security testing] Hands on
=====================================================

Vulnerability: A security-related issue which represents a backdoor for attackers.

[Source code] https://github.com/juice-shop/juice-shop
Step1: git clone https://github.com/juice-shop/juice-shop

[SAST tool link] https://github.com/ZupIT/horusec
Step2: apt-get update ; apt install jq

Step3: curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/master/deployments/scripts/install.sh | bash -s latest
       horusec version

Step4: horusec start -D -e="true" -p ./

Horusec is an open source framework that enhances the identification of vulnerabilities in your project with just one command.
https://horusec.io/site/

2) DAST[Dynamic application security testing] 
==========================
Run application as container
Step1: docker run --rm -idt -p 3000:3000 bkimminich/juice-shop 

docker run -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t <Application URL>
docker run -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://ip172-18-0-72-cq3ouei91nsg00damfh0-3000.direct.labs.play-with-docker.com

WARN-NEW: Dangerous JS Functions [10110] x 2 
        http://ip172-18-0-100-ckucfiufml8g009dm00g-3000.direct.labs.play-with-docker.com/main.js (200 OK)
        http://ip172-18-0-100-ckucfiufml8g009dm00g-3000.direct.labs.play-with-docker.com/vendor.js (200 OK)
FAIL-NEW: 0     FAIL-INPROG: 0  WARN-NEW: 9     WARN-INPROG: 0  INFO: 0 IGNORE: 0       PASS: 56

Application: collection of webpages. in DAST, it will navigate to each possible webpage and provide security analysis





In this analysis, a total of 492 possible vulnerabilities were found and we classified them into:
Total of Vulnerability CRITICAL is: 382
Total of Vulnerability HIGH is: 102
Total of Vulnerability MEDIUM is: 5
Total of Vulnerability LOW is: 3
